#创建service为${PROJECT_NAME}
apiVersion: v1
kind: Service
metadata:
  name: ${PROJECT_NAME}
  namespace: ${NAMESPACE}
spec:
  selector:
    app: ${PROJECT_NAME}
    release: canary
  ports:
  - name: http
    targetPort: 8080
    port: 8080

---
#创建后端服务的pod
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${PROJECT_NAME}
  namespace: ${NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${PROJECT_NAME}
      release: canary
  template:
    metadata:
      labels:
        app: ${PROJECT_NAME}
        release: canary
    spec:
      imagePullSecrets:
      - name: aliyun-docker-registry
      containers:
      - name: ${PROJECT_NAME}
        image: ${ALIYUN_CR_REGISTORY}/${ALIYUN_CR_NAMESPACE}/${PROJECT_NAME}:${VERSION}
        resources:
          limits:
            memory: "10240Mi"
            cpu: "2048m"
          requests:
            memory: "6144Mi"
            cpu: "1024m"
        env:
        - name: JAVA_TOOL_OPTIONS
          value: |
            -XX:+UseG1GC
            -XX:ParallelGCThreads=4
            -XX:MetaspaceSize=256m
            -XX:MaxMetaspaceSize=512m
            -XX:ReservedCodeCacheSize=256m
            -XX:+UseContainerSupport
            -XX:MaxRAMPercentage=50.0
            
            -Dsa-token.jwt-secret-key=ENC(${SA_TOKEN_JWT_SECRET_KEY})
            -Dsa-token.sign.secret-key=ENC(${SA_TOKEN_SIGN_SECRET_KEY})
          
            -Dapi-decrypt.publicKey=ENC(${API_DECRYPT_PUBLIC_KEY})
            -Dapi-decrypt.privateKey=ENC(${API_DECRYPT_PRIVATE_KEY})

            -Dspring.data.redis.host=ENC(${REDIS_HOST})
            -Dspring.data.redis.password=ENC(${REDIS_KEY})

            -Dspring.datasource.dynamic.datasource.mysql.url=jdbc:mysql://${DB_MYSQL_URL}/dev_alinesno_infra_smart_assistant_v100?serverTimezone=GMT%2B8&zeroDateTimeBehavior=CONVERT_TO_NULL
            -Dspring.datasource.dynamic.datasource.mysql.username=ENC(${DB_MYSQL_USERNAME})
            -Dspring.datasource.dynamic.datasource.mysql.password=ENC(${DB_MYSQL_PASSWORD})

            -Dspring.datasource.dynamic.datasource.postgresql.url=jdbc:postgresql://${DB_PGVECTOR_URL}/dev_alinesno_infra_base_search_vector_v110
            -Dspring.datasource.dynamic.datasource.postgresql.username=ENC(${DB_PGVECTOR_USERNAME})
            -Dspring.datasource.dynamic.datasource.postgresql.password=ENC(${DB_PGVECTOR_PASSWORD})

            -Dalinesno.infra.smart.brain.qianwen.key=ENC(${QIANWEN_SK})

            -Dalinesno.infra.qiniu.access-key=ENC(${QINIU_ACCESS_KEY})
            -Dalinesno.infra.qiniu.secret-key=ENC(${QINIU_SECRET_KEY})
            -Dalinesno.infra.qiniu.bucket=ENC(${QINIU_BUCKET_NAME})
            -Dalinesno.infra.qiniu.domain=ENC(${QINIU_BUCKET_DOMAIN})

            -Dalinesno.infra.qiniu.bucket-pub=ENC(${QINIU_BUCKET_NAME_PUB})
            -Dalinesno.infra.qiniu.domain-pub=ENC(${QINIU_BUCKET_DOMAIN_PUB})

            -Dserver.port=8080
        - name: JASYPT_ENCRYPTOR_PASSWORD
          value: ${JASYPT_ENCRYPTOR_PASSWORD}
        ports:
        - name: http
          containerPort: 8080

#            -Dalinesno.infra.gateway.host=${INFRA_GAGTEWAY}

#---
##创建域名服务
#apiVersion: networking.k8s.io/v1
#kind: Ingress
#metadata:
#  name: ingress-${PROJECT_NAME}
#  namespace: ${NAMESPACE}
#  annotations:
#    kubernetes.io/ingress.class: "nginx"
#spec:
#  rules:
#  - host: "${PROJECT_NAME}.${INFRA_DEV_DOMAIN}"
#    http:
#      paths:
#      - pathType: Prefix
#        path: "/"
#        backend:
#          service:
#            name: ${PROJECT_NAME}
#            port:
#              number: 8080
